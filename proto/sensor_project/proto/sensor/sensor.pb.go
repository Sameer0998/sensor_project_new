// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.0
// source: sensor.proto

package sensor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SensorData represents a single sensor reading
type SensorData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorValue   float32                `protobuf:"fixed32,1,opt,name=sensor_value,json=sensorValue,proto3" json:"sensor_value,omitempty"`
	SensorType    string                 `protobuf:"bytes,2,opt,name=sensor_type,json=sensorType,proto3" json:"sensor_type,omitempty"`
	Id1           string                 `protobuf:"bytes,3,opt,name=id1,proto3" json:"id1,omitempty"`
	Id2           int32                  `protobuf:"varint,4,opt,name=id2,proto3" json:"id2,omitempty"`
	Timestamp     int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorData) Reset() {
	*x = SensorData{}
	mi := &file_sensor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorData) ProtoMessage() {}

func (x *SensorData) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorData.ProtoReflect.Descriptor instead.
func (*SensorData) Descriptor() ([]byte, []int) {
	return file_sensor_proto_rawDescGZIP(), []int{0}
}

func (x *SensorData) GetSensorValue() float32 {
	if x != nil {
		return x.SensorValue
	}
	return 0
}

func (x *SensorData) GetSensorType() string {
	if x != nil {
		return x.SensorType
	}
	return ""
}

func (x *SensorData) GetId1() string {
	if x != nil {
		return x.Id1
	}
	return ""
}

func (x *SensorData) GetId2() int32 {
	if x != nil {
		return x.Id2
	}
	return 0
}

func (x *SensorData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// SensorResponse is the response from the sensor service
type SensorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorResponse) Reset() {
	*x = SensorResponse{}
	mi := &file_sensor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorResponse) ProtoMessage() {}

func (x *SensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorResponse.ProtoReflect.Descriptor instead.
func (*SensorResponse) Descriptor() ([]byte, []int) {
	return file_sensor_proto_rawDescGZIP(), []int{1}
}

func (x *SensorResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SensorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// FrequencyRequest is used to change the data generation frequency
type FrequencyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IntervalMs    int32                  `protobuf:"varint,1,opt,name=interval_ms,json=intervalMs,proto3" json:"interval_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrequencyRequest) Reset() {
	*x = FrequencyRequest{}
	mi := &file_sensor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyRequest) ProtoMessage() {}

func (x *FrequencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyRequest.ProtoReflect.Descriptor instead.
func (*FrequencyRequest) Descriptor() ([]byte, []int) {
	return file_sensor_proto_rawDescGZIP(), []int{2}
}

func (x *FrequencyRequest) GetIntervalMs() int32 {
	if x != nil {
		return x.IntervalMs
	}
	return 0
}

// FrequencyResponse is the response to a frequency change request
type FrequencyResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Success           bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message           string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CurrentIntervalMs int32                  `protobuf:"varint,3,opt,name=current_interval_ms,json=currentIntervalMs,proto3" json:"current_interval_ms,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FrequencyResponse) Reset() {
	*x = FrequencyResponse{}
	mi := &file_sensor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyResponse) ProtoMessage() {}

func (x *FrequencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyResponse.ProtoReflect.Descriptor instead.
func (*FrequencyResponse) Descriptor() ([]byte, []int) {
	return file_sensor_proto_rawDescGZIP(), []int{3}
}

func (x *FrequencyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FrequencyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FrequencyResponse) GetCurrentIntervalMs() int32 {
	if x != nil {
		return x.CurrentIntervalMs
	}
	return 0
}

var File_sensor_proto protoreflect.FileDescriptor

const file_sensor_proto_rawDesc = "" +
	"\n" +
	"\fsensor.proto\x12\x06sensor\"\x92\x01\n" +
	"\n" +
	"SensorData\x12!\n" +
	"\fsensor_value\x18\x01 \x01(\x02R\vsensorValue\x12\x1f\n" +
	"\vsensor_type\x18\x02 \x01(\tR\n" +
	"sensorType\x12\x10\n" +
	"\x03id1\x18\x03 \x01(\tR\x03id1\x12\x10\n" +
	"\x03id2\x18\x04 \x01(\x05R\x03id2\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\"D\n" +
	"\x0eSensorResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"3\n" +
	"\x10FrequencyRequest\x12\x1f\n" +
	"\vinterval_ms\x18\x01 \x01(\x05R\n" +
	"intervalMs\"w\n" +
	"\x11FrequencyResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12.\n" +
	"\x13current_interval_ms\x18\x03 \x01(\x05R\x11currentIntervalMs2\x93\x01\n" +
	"\rSensorService\x12>\n" +
	"\x0eSendSensorData\x12\x12.sensor.SensorData\x1a\x16.sensor.SensorResponse\"\x00\x12B\n" +
	"\x10StreamSensorData\x12\x12.sensor.SensorData\x1a\x16.sensor.SensorResponse\"\x00(\x01B\x1dZ\x1bsensor_project/proto/sensorb\x06proto3"

var (
	file_sensor_proto_rawDescOnce sync.Once
	file_sensor_proto_rawDescData []byte
)

func file_sensor_proto_rawDescGZIP() []byte {
	file_sensor_proto_rawDescOnce.Do(func() {
		file_sensor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sensor_proto_rawDesc), len(file_sensor_proto_rawDesc)))
	})
	return file_sensor_proto_rawDescData
}

var file_sensor_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_sensor_proto_goTypes = []any{
	(*SensorData)(nil),        // 0: sensor.SensorData
	(*SensorResponse)(nil),    // 1: sensor.SensorResponse
	(*FrequencyRequest)(nil),  // 2: sensor.FrequencyRequest
	(*FrequencyResponse)(nil), // 3: sensor.FrequencyResponse
}
var file_sensor_proto_depIdxs = []int32{
	0, // 0: sensor.SensorService.SendSensorData:input_type -> sensor.SensorData
	0, // 1: sensor.SensorService.StreamSensorData:input_type -> sensor.SensorData
	1, // 2: sensor.SensorService.SendSensorData:output_type -> sensor.SensorResponse
	1, // 3: sensor.SensorService.StreamSensorData:output_type -> sensor.SensorResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sensor_proto_init() }
func file_sensor_proto_init() {
	if File_sensor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sensor_proto_rawDesc), len(file_sensor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sensor_proto_goTypes,
		DependencyIndexes: file_sensor_proto_depIdxs,
		MessageInfos:      file_sensor_proto_msgTypes,
	}.Build()
	File_sensor_proto = out.File
	file_sensor_proto_goTypes = nil
	file_sensor_proto_depIdxs = nil
}
