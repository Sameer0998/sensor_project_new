// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: sensor.proto

package sensor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SensorService_SendSensorData_FullMethodName   = "/sensor.SensorService/SendSensorData"
	SensorService_StreamSensorData_FullMethodName = "/sensor.SensorService/StreamSensorData"
)

// SensorServiceClient is the client API for SensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SensorService defines the gRPC service for sending sensor data
type SensorServiceClient interface {
	// SendSensorData sends a single sensor reading
	SendSensorData(ctx context.Context, in *SensorData, opts ...grpc.CallOption) (*SensorResponse, error)
	// StreamSensorData establishes a stream for continuous sensor data
	StreamSensorData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SensorData, SensorResponse], error)
}

type sensorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorServiceClient(cc grpc.ClientConnInterface) SensorServiceClient {
	return &sensorServiceClient{cc}
}

func (c *sensorServiceClient) SendSensorData(ctx context.Context, in *SensorData, opts ...grpc.CallOption) (*SensorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensorResponse)
	err := c.cc.Invoke(ctx, SensorService_SendSensorData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorServiceClient) StreamSensorData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SensorData, SensorResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SensorService_ServiceDesc.Streams[0], SensorService_StreamSensorData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SensorData, SensorResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SensorService_StreamSensorDataClient = grpc.ClientStreamingClient[SensorData, SensorResponse]

// SensorServiceServer is the server API for SensorService service.
// All implementations must embed UnimplementedSensorServiceServer
// for forward compatibility.
//
// SensorService defines the gRPC service for sending sensor data
type SensorServiceServer interface {
	// SendSensorData sends a single sensor reading
	SendSensorData(context.Context, *SensorData) (*SensorResponse, error)
	// StreamSensorData establishes a stream for continuous sensor data
	StreamSensorData(grpc.ClientStreamingServer[SensorData, SensorResponse]) error
	mustEmbedUnimplementedSensorServiceServer()
}

// UnimplementedSensorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSensorServiceServer struct{}

func (UnimplementedSensorServiceServer) SendSensorData(context.Context, *SensorData) (*SensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSensorData not implemented")
}
func (UnimplementedSensorServiceServer) StreamSensorData(grpc.ClientStreamingServer[SensorData, SensorResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSensorData not implemented")
}
func (UnimplementedSensorServiceServer) mustEmbedUnimplementedSensorServiceServer() {}
func (UnimplementedSensorServiceServer) testEmbeddedByValue()                       {}

// UnsafeSensorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorServiceServer will
// result in compilation errors.
type UnsafeSensorServiceServer interface {
	mustEmbedUnimplementedSensorServiceServer()
}

func RegisterSensorServiceServer(s grpc.ServiceRegistrar, srv SensorServiceServer) {
	// If the following call pancis, it indicates UnimplementedSensorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SensorService_ServiceDesc, srv)
}

func _SensorService_SendSensorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).SendSensorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorService_SendSensorData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).SendSensorData(ctx, req.(*SensorData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorService_StreamSensorData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensorServiceServer).StreamSensorData(&grpc.GenericServerStream[SensorData, SensorResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SensorService_StreamSensorDataServer = grpc.ClientStreamingServer[SensorData, SensorResponse]

// SensorService_ServiceDesc is the grpc.ServiceDesc for SensorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.SensorService",
	HandlerType: (*SensorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSensorData",
			Handler:    _SensorService_SendSensorData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSensorData",
			Handler:       _SensorService_StreamSensorData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sensor.proto",
}
